worker_processes auto;
# error_log /var/log/nginx/error.log warn;
error_log stderr warn;
pid /var/run/nginx.pid;

# Make Redis variables available to Lua scripts
env REDIS_PASSWORD;
env REDIS_TIMEOUT;
env REDIS_HOST;
env REDIS_PORT;
env REDIS_KEEPALIVE_TIMEOUT;
env REDIS_POOL_SIZE;

events {
    worker_connections 1024;
}

http {
    include /usr/local/openresty/nginx/conf/mime.types;
    default_type application/octet-stream;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=5r/s;

    # DNS resolver for Docker internal DNS
    resolver 127.0.0.11 valid=30s;

    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'session_id="$session_id" backend="$upstream_addr"';

    access_log /var/log/nginx/access.log main;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Upstream backend servers
    upstream backend_servers {
        least_conn;
        include /etc/nginx/servers.conf;
    }

    # HTTP server - redirect to HTTPS
    server {
        listen 80;
        server_name _;

        # Health check can stay on HTTP
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Redirect everything else to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # Main server block
    server {
        listen 443 ssl;
        http2 on;
        server_name _;

        # SSL certificates
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        # Variables for session management
        set $session_id "";
        set $session_data "";
        set $backend_server "";

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Session management endpoint
        location /session {
            limit_req zone=api burst=10 nodelay;
            content_by_lua_file /etc/nginx/lua/session_manager.lua;
        }

        # Main proxy location
        location / {
            limit_req zone=general burst=20 nodelay;
            access_by_lua_file /etc/nginx/lua/access_handler.lua;

            # Proxy settings
            proxy_pass http://backend_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Session headers
            proxy_set_header X-Session-Id $session_id;
            proxy_set_header X-Session-Data $session_data;

            # Connection settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;

            # Handle backend response - save + remove session data header
            header_filter_by_lua_file /etc/nginx/lua/header_filter.lua;

            # Save session data to Redis after response is sent - non-blocking
            log_by_lua_file /etc/nginx/lua/log_by.lua;
        }
    }
}
