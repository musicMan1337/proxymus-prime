# Test environment configuration - sets up test backends
# Container names will need to match nginx/servers.conf for testing
services:
  redis:
    extends:
      service: redis_base
      file: docker-compose.services.yml
    networks:
      - proxy_network
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
      - ./logs/redis:/var/log/redis
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "7"

  nginx_proxy:
    extends:
      service: nginx_proxy_base
      file: docker-compose.services.yml
    networks:
      - proxy_network
    volumes:
      - ./logs/nginx:/var/log/nginx
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "7"

  # Example backend servers (for testing)
  backend1:
    extends:
      service: test_backend
      file: docker-compose.services.yml
    container_name: backend_server_1
    ports:
      - "${BACKEND1_PORT:-8081}:80"
    networks:
      - proxy_network
    environment:
      - SERVER_ID=server1

  backend2:
    extends:
      service: test_backend
      file: docker-compose.services.yml
    container_name: backend_server_2
    ports:
      - "${BACKEND2_PORT:-8082}:80"
    networks:
      - proxy_network
    environment:
      - SERVER_ID=server2

  backend3:
    extends:
      service: test_backend
      file: docker-compose.services.yml
    container_name: backend_server_3
    ports:
      - "${BACKEND3_PORT:-8083}:80"
    networks:
      - proxy_network
    environment:
      - SERVER_ID=server3

volumes:
  redis-data:

networks:
  proxy_network:
    driver: bridge
